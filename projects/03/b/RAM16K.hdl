// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux4Way(
        in=load, sel=address[0..1], 
        a=ram0load, b=ram1load, c=ram2load, d=ram3load
    );

    // 8 * RAM4K = RAM16K
    RAM4K(in=in, load=ram0load, address=address[2..13], out=ram0out);
    RAM4K(in=in, load=ram1load, address=address[2..13], out=ram1out);
    RAM4K(in=in, load=ram2load, address=address[2..13], out=ram2out);
    RAM4K(in=in, load=ram3load, address=address[2..13], out=ram3out);

    // output selected subpart part of the memory
    Mux4Way16( 
        sel=address[0..1],
        a=ram0out, b=ram1out, c=ram2out, d=ram3out,
        out=out
    );
}
